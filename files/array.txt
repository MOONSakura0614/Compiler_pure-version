const int _a = 3+2+-+2%2/1;
const int a=3+(1*2)/2*_a;
const int arrayA[2] = {1,2};
const int array_b[2] = {1,arrayA[0]};
int array_c[4] = {1,a};
int array_d[2] = {1,2};
int main(){
	int x;
	x=getint();
	printf("what you enter in is:%d\n",x);
	printf("_a=%d\n",_a);
	printf("array_c[0] is:%d\n",array_c[0]);
	printf("array_d[0] is:%d\n",array_d[0]);
	printf("array_d[1] is:%d\n",array_d[1]);
	int i=2;
	int ext;
	while(i<x){
		ext=x%i;
		if(ext==0){
			x=x/i;
			printf("%d ",i);
		}
		else{
			i=i+1;
		}

	}	printf("%d",x);
	printf("\nOver");
	return 0;
}

@_a = constant i32 5
@a = constant i32 8
@arrayA = constant [2 x i32] [i32 1, i32 2]
@array_b = constant [2 x i32] [i32 1, i32 1]
@array_c = global [4 x i32] [i32 1, i32 8, i32 0, i32 0]
@array_d = global [2 x i32] [i32 1, i32 2]
@_str_0 = constant [22 x i8] c"what you enter in is:\00"
@_str_1 = constant [4 x i8] c"_a=\00"
@_str_2 = constant [15 x i8] c"array_c[0] is:\00"
@_str_3 = constant [15 x i8] c"array_d[0] is:\00"
@_str_4 = constant [15 x i8] c"array_d[1] is:\00"
@_str_5 = constant [6 x i8] c"\0aOver\00"

declare i32 @getint()

declare void @putint(i32)

declare void @putch(i32)

declare void @putstr(i8*)

define dso_local i32 @main(){
;<label>:0:
	%1 = alloca i32
	%2 = call i32 @getint()
	store i32 %2, i32* %1
	%3 = load i32, i32* %1
	%4 = getelementptr inbounds [22 x i8], [22 x i8]* @_str_0, i32 0, i32 0
	call void @putstr(i8* %4)
	call void @putint(i32 %3)
	call void @putch(i32 10)
	%5 = load i32, i32* @_a
	%6 = getelementptr inbounds [4 x i8], [4 x i8]* @_str_1, i32 0, i32 0
	call void @putstr(i8* %6)
	call void @putint(i32 %5)
	call void @putch(i32 10)
	%7 = getelementptr [4 x i32], [4 x i32]* @array_c, i32 0, i32 0
	%8 = load i32, i32* %7
	%9 = getelementptr inbounds [15 x i8], [15 x i8]* @_str_2, i32 0, i32 0
	call void @putstr(i8* %9)
	call void @putint(i32 %8)
	call void @putch(i32 10)
	%10 = getelementptr [2 x i32], [2 x i32]* @array_d, i32 0, i32 0
	%11 = load i32, i32* %10
	%12 = getelementptr inbounds [15 x i8], [15 x i8]* @_str_3, i32 0, i32 0
	call void @putstr(i8* %12)
	call void @putint(i32 %11)
	call void @putch(i32 10)
	%13 = getelementptr [2 x i32], [2 x i32]* @array_d, i32 0, i32 1
	%14 = load i32, i32* %13
	%15 = getelementptr inbounds [15 x i8], [15 x i8]* @_str_4, i32 0, i32 0
	call void @putstr(i8* %15)
	call void @putint(i32 %14)
	call void @putch(i32 10)
	%16 = alloca i32
	store i32 2, i32* %16
	%17 = alloca i32
	br label %18

;<label>:18:
	%19 = load i32, i32* %16
	%20 = load i32, i32* %1
	%21 = icmp slt i32 %19, %20
	br i1 %21, label %26, label %32

;<label>:22:
	%23 = load i32, i32* %16
	%24 = load i32, i32* %1
	%25 = icmp slt i32 %23, %24
	br i1 %25, label %26, label %32

;<label>:26:
	%27 = load i32, i32* %1
	%28 = load i32, i32* %16
	%29 = srem i32 %27, %28
	store i32 %29, i32* %17
	%30 = load i32, i32* %17
	%31 = icmp eq i32 %30, 0
	br i1 %31, label %35, label %40

;<label>:32:
	%33 = load i32, i32* %1
	call void @putint(i32 %33)
	%34 = getelementptr inbounds [6 x i8], [6 x i8]* @_str_5, i32 0, i32 0
	call void @putstr(i8* %34)
	ret i32 0

;<label>:35:
	%36 = load i32, i32* %1
	%37 = load i32, i32* %16
	%38 = sdiv i32 %36, %37
	store i32 %38, i32* %1
	%39 = load i32, i32* %16
	call void @putint(i32 %39)
	call void @putch(i32 32)
	br label %43

;<label>:40:
	%41 = load i32, i32* %16
	%42 = add i32 %41, 1
	store i32 %42, i32* %16
	br label %43

;<label>:43:
	br label %22
}


-------------
int a[5][5];
const int constIntA[20] = {1,2,0};
int func1(){
    return a[1][2];
}
int main() {
    int array_a[20] = {1,2,3};
    //const char arrayChar[5] = {'a', 1};
    const int arrayChar[5] = {'a', 1};
    int aa = a[constIntA[1]];
    int aaa = arrayChar[3];
    const int cA = arrayChar[1];
    printf("%d", cA);
    int aTest[20] = {aa, aaa};
    return 0;
}

@a = global [5 x [5 x i32]] zeroinitializer
@constIntA = constant [20 x i32] [i32 1, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0]

declare i32 @getint()

declare void @putint(i32)

declare void @putch(i32)

declare void @putstr(i8*)

define dso_local i32 @func1(){
;<label>:0:
	%1 = getelementptr [5 x [5 x i32]], [5 x [5 x i32]]* @a, i32 0, i32 1, i32 2
	%2 = load i32, i32* %1
	ret i32 %2
}

define dso_local i32 @main(){
;<label>:0:
	%1 = alloca [20 x i32]
	%2 = getelementptr [20 x i32], [20 x i32]* %1, i32 0, i32 0
	store i32 1, i32* %2
	%3 = getelementptr [20 x i32], [20 x i32]* %1, i32 0, i32 1
	store i32 2, i32* %3
	%4 = getelementptr [20 x i32], [20 x i32]* %1, i32 0, i32 2
	store i32 3, i32* %4
	%5 = alloca [5 x i32]
	%6 = getelementptr [5 x i32], [5 x i32]* %5, i32 0, i32 0
	store i32 0, i32* %6
	%7 = getelementptr [5 x i32], [5 x i32]* %5, i32 0, i32 1
	store i32 1, i32* %7
	%8 = getelementptr [20 x i32], [20 x i32]* @constIntA, i32 0, i32 1
	%9 = load i32, i32* %8
	%10 = getelementptr [5 x [5 x i32]], [5 x [5 x i32]]* @a, i32 0, i32 %9
	%11 = getelementptr [5 x i32], [5 x i32]* %10, i32 0, i32 0
	%12 = alloca i32
	store i32* %11, i32* %12
	%13 = getelementptr [5 x i32], [5 x i32]* %5, i32 0, i32 3
	%14 = load i32, i32* %13
	%15 = alloca i32
	store i32 %14, i32* %15
	%16 = alloca i32
	store i32 1, i32* %16
	%17 = load i32, i32* %16
	call void @putint(i32 %17)
	%18 = alloca [20 x i32]
	%19 = load i32, i32* %12
	%20 = getelementptr [20 x i32], [20 x i32]* %18, i32 0, i32 0
	store i32 %19, i32* %20
	%21 = load i32, i32* %15
	%22 = getelementptr [20 x i32], [20 x i32]* %18, i32 0, i32 1
	store i32 %21, i32* %22
	ret i32 0
}

---------函数传参：传数组
int a[5][5];
const int constIntA[20] = {1,2,0};
int func1(){
    return a[1][2];
}
int func2(int a[]) {
    int i = 10, sum =0;
    while(i >0) {
        sum = sum + a[i];
        i = i-1;
    }
    return sum;
}
int main() {
    int array_a[20] = {1,2,3};
    //const char arrayChar[5] = {'a', 1};
    const int arrayChar[5] = {'a', 1};
    int aa = a[constIntA[1]];
    int aaa = arrayChar[3];
    const int cA = arrayChar[1];
    printf("%d", cA);
    int aTest[20] = {aa, aaa};
    int func2Res;
    func2Res = func2(aTest);
    return 0;
}

@a = global [5 x [5 x i32]] zeroinitializer
@constIntA = constant [20 x i32] [i32 1, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0]

declare i32 @getint()

declare void @putint(i32)

declare void @putch(i32)

declare void @putstr(i8*)

define dso_local i32 @func1(){
;<label>:0:
	%1 = getelementptr [5 x [5 x i32]], [5 x [5 x i32]]* @a, i32 0, i32 1, i32 2
	%2 = load i32, i32* %1
	ret i32 %2
}

define dso_local i32 @func2(i32*){
;<label>:1:
	%2 = alloca i32*
	store i32* %0, i32** %2
	%3 = alloca i32
	store i32 10, i32* %3
	%4 = alloca i32
	store i32 0, i32* %4
	br label %5

;<label>:5:
	%6 = load i32, i32* %3
	%7 = icmp sgt i32 %6, 0
	br i1 %7, label %11, label %20

;<label>:8:
	%9 = load i32, i32* %3
	%10 = icmp sgt i32 %9, 0
	br i1 %10, label %11, label %20

;<label>:11:
	%12 = load i32, i32* %4
	%13 = load i32, i32* %3
	%14 = load i32*, i32** %2
	%15 = getelementptr i32, i32* %14, i32 %13
	%16 = load i32, i32* %15
	%17 = add i32 %12, %16
	store i32 %17, i32* %4
	%18 = load i32, i32* %3
	%19 = sub i32 %18, 1
	store i32 %19, i32* %3
	br label %8

;<label>:20:
	%21 = load i32, i32* %4
	ret i32 %21
}

define dso_local i32 @main(){
;<label>:0:
	%1 = alloca [20 x i32]
	%2 = getelementptr [20 x i32], [20 x i32]* %1, i32 0, i32 0
	store i32 1, i32* %2
	%3 = getelementptr [20 x i32], [20 x i32]* %1, i32 0, i32 1
	store i32 2, i32* %3
	%4 = getelementptr [20 x i32], [20 x i32]* %1, i32 0, i32 2
	store i32 3, i32* %4
	%5 = alloca [5 x i32]
	%6 = getelementptr [5 x i32], [5 x i32]* %5, i32 0, i32 0
	store i32 0, i32* %6
	%7 = getelementptr [5 x i32], [5 x i32]* %5, i32 0, i32 1
	store i32 1, i32* %7
	%8 = getelementptr [20 x i32], [20 x i32]* @constIntA, i32 0, i32 1
	%9 = load i32, i32* %8
	%10 = getelementptr [5 x [5 x i32]], [5 x [5 x i32]]* @a, i32 0, i32 %9
	%11 = getelementptr [5 x i32], [5 x i32]* %10, i32 0, i32 0
	%12 = alloca i32
	store i32* %11, i32* %12
	%13 = getelementptr [5 x i32], [5 x i32]* %5, i32 0, i32 3
	%14 = load i32, i32* %13
	%15 = alloca i32
	store i32 %14, i32* %15
	%16 = alloca i32
	store i32 1, i32* %16
	%17 = load i32, i32* %16
	call void @putint(i32 %17)
	%18 = alloca [20 x i32]
	%19 = load i32, i32* %12
	%20 = getelementptr [20 x i32], [20 x i32]* %18, i32 0, i32 0
	store i32 %19, i32* %20
	%21 = load i32, i32* %15
	%22 = getelementptr [20 x i32], [20 x i32]* %18, i32 0, i32 1
	store i32 %21, i32* %22
	%23 = alloca i32
	%24 = getelementptr [20 x i32], [20 x i32]* %18, i32 0, i32 0
	%25 = call i32 @func2(i32* %24)
	store i32 %25, i32* %23
	ret i32 0
}

