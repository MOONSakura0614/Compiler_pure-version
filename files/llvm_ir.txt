declare i32 @getint()
declare i32 @getchar()
declare void @putint(i32)
declare void @putch(i32)
declare void @putstr(i8*)
@AZ = dso_local global i32 100
@AZA1 = dso_local global i32 200
@AZA2 = dso_local global i32 300
@az = dso_local global i32 0
@aza = dso_local global i32 100
@azaz1 = dso_local global i32 0
@azaz2 = dso_local global i32 200
define dso_local void @func1() {
0:
    br label %1 ; 进入for句型中的cond

1:
    %2 = icmp ne i32 1, 0
    br i1 %2, label %3, label %20

3:
    %4 = alloca i32
    store i32 0, i32* %4
    store i32 0, i32* %4
    %5 = load i32, i32* %4
    %6 = mul i32 %5, 8
    %7 = load i32, i32* %4
    %8 = icmp ne i32 %7, 0
    br i1 %8, label %9, label %10

9:
    br label %10

10:
    %11 = load i32, i32* %4
    %12 = icmp ne i32 %11, 0
    br i1 %12, label %13, label %14

13:
    br label %15

14:
    br label %15

15:
    %16 = call i32 @getint()
    store i32 %16, i32* %4
    call void @putch(i32 104)
    call void @putch(i32 101)
    call void @putch(i32 108)
    call void @putch(i32 108)
    call void @putch(i32 111)
    call void @putch(i32 63)
    call void @putch(i32 32)
    %17 = load i32, i32* %4
    call void @putint(i32 %17)
    call void @putch(i32 32)
    %18 = load i32, i32* %4
    %19 = load i32, i32* %4
    call void @putint(i32 %18)
    call void @putch(i32 32)
    call void @putint(i32 %19)
    call void @putch(i32 10)

20:
    %21 = icmp ne i32 1, 0
    br i1 %21, label %22, label %23

22:
    br label %23

23:
    ret void
}

define dso_local i32 @func2() {
0:
    %1 = alloca i32
    store i32 43, i32* %1
    %2 = alloca i32
    %3 = load i32, i32* %1
    store i32 %3, i32* %2
    %4 = alloca i32
    %5 = alloca i32
    %6 = alloca i32
    store i32 0, i32* %6
    ret i32 100
}

define dso_local void @func3(i32 %0) {
1:
    %2 = alloca i32
    store i32 %0, i32* %2
    %3 = load i32, i32* %2
    call void @putch(i32 102)
    call void @putch(i32 117)
    call void @putch(i32 110)
    call void @putch(i32 99)
    call void @putch(i32 51)
    call void @putch(i32 32)
    call void @putch(i32 105)
    call void @putch(i32 110)
    call void @putch(i32 112)
    call void @putch(i32 117)
    call void @putch(i32 116)
    call void @putch(i32 32)
    call void @putch(i32 61)
    call void @putch(i32 32)
    call void @putint(i32 %3)
    call void @putch(i32 10)
    %4 = alloca i32
    store i32 7, i32* %4
    %5 = alloca i32
    store i32 8, i32* %5
    %6 = load i32, i32* %4
    %7 = load i32, i32* %5
    %8 = add i32 %6, %7
    %9 = icmp eq i32 %8, 0
    br i1 %9, label %10, label %11

10:
    br label %11

11:
    %12 = load i32, i32* %4
    %13 = load i32, i32* %5
    %14 = add i32 %12, %13
    %15 = load i32, i32* %4
    %16 = load i32, i32* %5
    %17 = add i32 %15, %16
    %18 = icmp slt i32 %14, %17
    br i1 %18, label %19, label %20

19:
    br label %20

20:
    %21 = load i32, i32* %4
    %22 = load i32, i32* %5
    %23 = add i32 %21, %22
    %24 = load i32, i32* %4
    %25 = load i32, i32* %5
    %26 = add i32 %24, %25
    %27 = icmp sgt i32 %23, %26
    br i1 %27, label %28, label %29

28:
    br label %29

29:
    %30 = load i32, i32* %4
    %31 = load i32, i32* %5
    %32 = add i32 %30, %31
    %33 = load i32, i32* %4
    %34 = load i32, i32* %5
    %35 = add i32 %33, %34
    %36 = icmp sle i32 %32, %35
    br i1 %36, label %37, label %38

37:
    br label %38

38:
    %39 = load i32, i32* %4
    %40 = load i32, i32* %5
    %41 = add i32 %39, %40
    %42 = load i32, i32* %4
    %43 = load i32, i32* %5
    %44 = add i32 %42, %43
    %45 = icmp sge i32 %41, %44
    br i1 %45, label %46, label %47

46:
    br label %47

47:
    %48 = load i32, i32* %4
    %49 = load i32, i32* %5
    %50 = add i32 %48, %49
    %51 = load i32, i32* %4
    %52 = load i32, i32* %5
    %53 = add i32 %51, %52
    %54 = icmp eq i32 %50, %53
    br i1 %54, label %55, label %56

55:
    br label %56

56:
    %57 = load i32, i32* %4
    %58 = load i32, i32* %5
    %59 = add i32 %57, %58
    %60 = load i32, i32* %4
    %61 = load i32, i32* %5
    %62 = add i32 %60, %61
    %63 = icmp ne i32 %59, %62
    br i1 %63, label %64, label %65

64:
    br label %65

65:
    ret void
}

define dso_local i32 @func4(i32 %0, i32 %1, i32 %2) {
3:
    %4 = alloca i32
    store i32 %0, i32* %4
    %5 = alloca i32
    store i32 %1, i32* %5
    %6 = alloca i32
    store i32 %2, i32* %6
    %7 = alloca i32
    %8 = load i32, i32* %4
    %9 = load i32, i32* %5
    %10 = mul i32 %8, %9
    %11 = load i32, i32* %5
    %12 = load i32, i32* %4
    %13 = sdiv i32 %10, %11
    %14 = srem i32 %13, %12
    %15 = load i32, i32* %6
    %16 = load i32, i32* %6
    %17 = load i32, i32* %4
    %18 = load i32, i32* %6
    %19 = load i32, i32* %6
    %20 = sdiv i32 %17, %18
    %21 = sdiv i32 %20, %19
    %22 = mul i32 %16, %21
    %23 = add i32 %14, %15
    %24 = sub i32 %23, %22
    store i32 %24, i32* %7
    %25 = alloca i32
    store i32 0, i32* %25
    %26 = alloca i32
    %27 = mul i32 100, 200
    %28 = srem i32 %27, 300
    store i32 %28, i32* %26
    %29 = alloca i32
    %30 = load i32, i32* %26
    %31 = add i32 %30, 4
    store i32 %31, i32* %29
    %32 = alloca i32
    %33 = load i32, i32* %29
    store i32 %33, i32* %32
    %34 = alloca i32
    %35 = call i32 @func2()
    store i32 %35, i32* %34
    %36 = alloca i32
    %37 = call i32 @func2()
    %38 = add i32 0, %37
    %39 = sub i32 0, %38
    %40 = add i32 0, %39
    %41 = sub i32 0, %40
    store i32 %41, i32* %36
    %42 = alloca i32
    %43 = load i32, i32* %34
    %44 = load i32, i32* %32
    %45 = mul i32 %43, %44
    store i32 %45, i32* %42
    %46 = alloca i32
    %47 = load i32, i32* %42
    %48 = load i32, i32* %32
    %49 = sdiv i32 %47, %48
    store i32 %49, i32* %46
    %50 = alloca i32
    %51 = load i32, i32* %46
    %52 = load i32, i32* %34
    %53 = srem i32 %51, %52
    store i32 %53, i32* %50
    %54 = alloca i32
    %55 = load i32, i32* %46
    %56 = load i32, i32* %50
    %57 = add i32 %55, %56
    store i32 %57, i32* %54
    %58 = alloca i32
    %59 = load i32, i32* %46
    %60 = load i32, i32* %50
    %61 = sub i32 %59, %60
    store i32 %61, i32* %58
    %62 = load i32, i32* %29
    %63 = load i32, i32* %32
    %64 = load i32, i32* %34
    %65 = load i32, i32* %36
    %66 = load i32, i32* %42
    %67 = load i32, i32* %46
    %68 = load i32, i32* %50
    %69 = load i32, i32* %54
    %70 = load i32, i32* %58
    call void @putint(i32 %62)
    call void @putch(i32 32)
    call void @putint(i32 %63)
    call void @putch(i32 32)
    call void @putint(i32 %64)
    call void @putch(i32 32)
    call void @putint(i32 %65)
    call void @putch(i32 32)
    call void @putint(i32 %66)
    call void @putch(i32 32)
    call void @putint(i32 %67)
    call void @putch(i32 32)
    call void @putint(i32 %68)
    call void @putch(i32 32)
    call void @putint(i32 %69)
    call void @putch(i32 32)
    call void @putint(i32 %70)
    call void @putch(i32 10)
    ret i32 1
}

define dso_local i32 @main() {
0:
    call void @func1()
    call void @putch(i32 102)
    call void @putch(i32 117)
    call void @putch(i32 110)
    call void @putch(i32 99)
    call void @putch(i32 49)
    call void @putch(i32 32)
    call void @putch(i32 100)
    call void @putch(i32 111)
    call void @putch(i32 110)
    call void @putch(i32 101)
    call void @putch(i32 33)
    call void @putch(i32 10)
    %1 = call i32 @func2()
    call void @putch(i32 102)
    call void @putch(i32 117)
    call void @putch(i32 110)
    call void @putch(i32 99)
    call void @putch(i32 50)
    call void @putch(i32 32)
    call void @putch(i32 100)
    call void @putch(i32 111)
    call void @putch(i32 110)
    call void @putch(i32 101)
    call void @putch(i32 33)
    call void @putch(i32 10)
    %2 = load i32, i32* @az
    call void @func3(i32 %2)
    call void @putch(i32 102)
    call void @putch(i32 117)
    call void @putch(i32 110)
    call void @putch(i32 99)
    call void @putch(i32 51)
    call void @putch(i32 32)
    call void @putch(i32 100)
    call void @putch(i32 111)
    call void @putch(i32 110)
    call void @putch(i32 101)
    call void @putch(i32 33)
    call void @putch(i32 10)
    %3 = call i32 @func4(i32 1, i32 2, i32 3)
    call void @putch(i32 102)
    call void @putch(i32 117)
    call void @putch(i32 110)
    call void @putch(i32 99)
    call void @putch(i32 52)
    call void @putch(i32 32)
    call void @putch(i32 100)
    call void @putch(i32 111)
    call void @putch(i32 110)
    call void @putch(i32 101)
    call void @putch(i32 33)
    call void @putch(i32 10)
    ret i32 0
}



declare i32 @getint()
declare i32 @getchar()
declare void @putint(i32)
declare void @putch(i32)
declare void @putstr(i8*)
define dso_local i32 @main() {
reg_0:
    %reg_1 = alloca i32
    store i32 0, i32* %reg_1
    br label %reg_2

reg_2:
    %reg_3 = load i32, i32* %reg_1
    %reg_4 = icmp slt i32 %reg_3, 4
    br i1 %reg_4, label %reg_5, label %reg_6

reg_5:
    br label %reg_7
    br label %reg_2

reg_6:
    ret i32 0

reg_7:
    %reg_8 = load i32, i32* %reg_1
    %reg_9 = icmp ne i32 %reg_8, 4
    br i1 %reg_9, label %reg_10, label %reg_11

reg_10:
    %reg_12 = load i32, i32* %reg_1
    %reg_13 = add i32 %reg_12, 1
    store i32 %reg_13, i32* %reg_1
    %reg_14 = load i32, i32* %reg_1
    %reg_15 = icmp ne i32 %reg_14, 6
    br i1 %reg_15, label %reg_16, label %reg_17
    br label %reg_7

reg_11:
    %reg_24 = load i32, i32* %reg_1
    %reg_25 = icmp eq i32 %reg_24, 4
    br i1 %reg_25, label %reg_26, label %reg_27

reg_16:
    br label %reg_7
    br label %reg_23

reg_17:
    %reg_18 = load i32, i32* %reg_1
    %reg_19 = sub i32 %reg_18, 1
    %reg_20 = icmp eq i32 %reg_19, 4
    br i1 %reg_20, label %reg_21, label %reg_22
    br label %reg_23

reg_21:
    br label %reg_11
    br label %reg_22

reg_22:

reg_23:

reg_26:
    br label %reg_6
    br label %reg_27 ; 可以删

reg_27:
}

