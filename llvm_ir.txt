declare i32 @getint()
declare i32 @getchar()
declare void @putint(i32)
declare void @putch(i32)
declare void @putstr(i8*)
@a = dso_local global [10 x i32] [i32 1, i32 2, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0]
@c0 = dso_local global [5 x i8] [i8 98, i8 1, i8 117, i8 0, i8 0]
@ac = dso_local global [3 x i32] [i32 3, i32 -1, i32 0]
@zero = dso_local global [12 x i32] zeroinitializer
@aaa = dso_local global [10 x i32] zeroinitializer
@zeroChar = dso_local global [1 x i8] zeroinitializer
@zero_val = dso_local global i32 0
define dso_local i32 @main() {
reg_0:
    %reg_1 = alloca [3 x i32]
    %reg_2 = getelementptr [3 x i32], [3 x i32]* %reg_1, i32 0, i32 0
    store i32 1, i32* %reg_2
    %reg_3 = getelementptr [3 x i32], [3 x i32]* %reg_1, i32 0, i32 1
    store i32 2, i32* %reg_3
    %reg_4 = getelementptr [3 x i32], [3 x i32]* %reg_1, i32 0, i32 2
    store i32 3, i32* %reg_4
    %reg_5 = alloca i32
    %reg_6 = load i32, i32* @zero_val
    %reg_7 = getelementptr [5 x i8], [5 x i8]* @c0, i8 0, i8 %reg_6
    %reg_8 = load i8, i8* %reg_7
    %reg_9 = zext i8 %reg_8 to i32
    store i32 %reg_9, i32* %reg_5
    %reg_10 = alloca i32
    %reg_11 = load i32, i32* @zero_val
    store i32 %reg_11, i32* %reg_10
    %reg_12 = alloca [23 x i8]
    %reg_13 = getelementptr [23 x i8], [23 x i8]* %reg_12, i8 0, i8 0
    %reg_14 = getelementptr [3 x i32], [3 x i32]* %reg_1, i32 0, i32 0
    %reg_15 = load i32, i32* %reg_14
    store i32 %reg_15, i32* %reg_14
    %reg_16 = getelementptr [23 x i8], [23 x i8]* %reg_12, i8 0, i8 1
    %reg_17 = getelementptr [5 x i8], [5 x i8]* @c0, i8 0, i8 1
    %reg_18 = load i8, i8* %reg_17
    store i8 %reg_18, i8* %reg_17
    %reg_19 = getelementptr [23 x i8], [23 x i8]* %reg_12, i8 0, i8 2
    %reg_20 = getelementptr [10 x i32], [10 x i32]* @a, i32 0, i32 1
    %reg_21 = load i32, i32* %reg_20
    store i32 %reg_21, i32* %reg_20
    %reg_22 = getelementptr [23 x i8], [23 x i8]* %reg_12, i8 0, i8 3
    %reg_23 = load i32, i32* @zero_val
    %reg_24 = trunc i32 %reg_23 to i8
    store i8 %reg_24, i8* %reg_22
    ret i32 0
}

