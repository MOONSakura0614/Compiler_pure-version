declare i32 @getint()
declare i32 @getchar()
declare void @putint(i32)
declare void @putch(i32)
declare void @putstr(i8*)
@MAXINT = dso_local global i32 2147483647
@MININT = dso_local global i32 -2147483647
@MAXCHAR = dso_local global i8 126
@MINCHAR = dso_local global i8 32
@ZERO = dso_local global i32 0
@ONE = dso_local global i32 1
@TWO = dso_local global i32 2
@THREE = dso_local global i32 3
@FOUR = dso_local global i32 4
@FIVE = dso_local global i32 5
@SIX = dso_local global i32 6
@SEVEN = dso_local global i32 7
@EIGHT = dso_local global i32 8
@NINE = dso_local global i32 9
@TEN = dso_local global i32 10
@ZERO_TO_TEN = dso_local global [11 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10]
@NO_USE1 = dso_local global [11 x i32] zeroinitializer
@NO_USE2 = dso_local global [11 x i32] [i32 0, i32 1, i32 2, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0]
@A = dso_local global i8 65
@B = dso_local global i8 66
@C = dso_local global i8 67
@D = dso_local global i8 68
@E = dso_local global i8 69
@F = dso_local global i8 70
@G = dso_local global i8 71
@H = dso_local global i8 72
@I = dso_local global i8 73
@J = dso_local global i8 74
@ABCDEFGHIJ = dso_local global [11 x i8] [i8 65, i8 66, i8 67, i8 68, i8 69, i8 70, i8 71, i8 72, i8 73, i8 74, i8 0]
@NO_USE3 = dso_local global [11 x i8] zeroinitializer
@NO_USE4 = dso_local global [11 x i8] [i8 78, i8 79, i8 95, i8 85, i8 83, i8 69, i8 52, i8 0, i8 0, i8 0, i8 0]
@fibonacci = dso_local global [15 x i32] zeroinitializer
define dso_local void @cal_fibonacci() {
reg_0:
    %reg_1 = getelementptr [15 x i32], [15 x i32]* @fibonacci, i32 0, i32 1
    store i32 1, i32* %reg_1
    %reg_2 = alloca i32
    store i32 2, i32* %reg_2
    br label %reg_3

reg_3:
    %reg_4 = load i32, i32* %reg_2
    %reg_5 = icmp slt i32 %reg_4, 15
    br i1 %reg_5, label %reg_6, label %reg_8

reg_6:
    %reg_9 = load i32, i32* %reg_2
    %reg_10 = sub i32 %reg_9, 1
    %reg_11 = getelementptr [15 x i32], [15 x i32]* @fibonacci, i32 %reg_10
    %reg_12 = load i32, i32* %reg_11
    %reg_13 = load i32, i32* %reg_2
    %reg_14 = sub i32 %reg_13, 2
    %reg_15 = getelementptr [15 x i32], [15 x i32]* @fibonacci, i32 %reg_14
    %reg_16 = load i32, i32* %reg_15
    %reg_17 = add i32 %reg_12, %reg_16
    %reg_18 = load i32, i32* %reg_2
    %reg_19 = getelementptr [15 x i32], [15 x i32]* @fibonacci, i32 %reg_18
    store i32 %reg_17, i32* %reg_19
    br label %reg_7

reg_7:
    %reg_20 = load i32, i32* %reg_2
    %reg_21 = add i32 %reg_20, 1
    store i32 %reg_21, i32* %reg_2
    br label %reg_3

reg_8:
    ret void
}

define dso_local void @print_fibonacci_n(i32 %reg_0, i32 %reg_1, i32 %reg_2) {
reg_3:
    %reg_4 = alloca i32
    store i32 %reg_0, i32* %reg_4
    %reg_5 = alloca i32
    store i32 %reg_1, i32* %reg_5
    %reg_6 = alloca i32
    store i32 %reg_2, i32* %reg_6
    %reg_7 = load i32, i32* %reg_4
    %reg_8 = load i32, i32* %reg_4
    %reg_9 = getelementptr [15 x i32], [15 x i32]* @fibonacci, i32 %reg_8
    %reg_10 = load i32, i32* %reg_9
    %reg_11 = load i32, i32* %reg_5
    %reg_12 = load i32, i32* %reg_5
    %reg_13 = getelementptr [15 x i32], [15 x i32]* @fibonacci, i32 %reg_12
    %reg_14 = load i32, i32* %reg_13
    %reg_15 = load i32, i32* %reg_6
    %reg_16 = load i32, i32* %reg_6
    %reg_17 = getelementptr [15 x i32], [15 x i32]* @fibonacci, i32 %reg_16
    %reg_18 = load i32, i32* %reg_17
    call void @putch(i32 70)
    call void @putch(i32 105)
    call void @putch(i32 98)
    call void @putch(i32 111)
    call void @putch(i32 110)
    call void @putch(i32 97)
    call void @putch(i32 99)
    call void @putch(i32 99)
    call void @putch(i32 105)
    call void @putch(i32 32)
    call void @putch(i32 65)
    call void @putch(i32 114)
    call void @putch(i32 114)
    call void @putch(i32 97)
    call void @putch(i32 121)
    call void @putch(i32 32)
    call void @putint(i32 %reg_7)
    call void @putch(i32 32)
    call void @putch(i32 58)
    call void @putch(i32 32)
    call void @putint(i32 %reg_10)
    call void @putch(i32 32)
    call void @putch(i32 32)
    call void @putint(i32 %reg_11)
    call void @putch(i32 32)
    call void @putch(i32 58)
    call void @putch(i32 32)
    call void @putint(i32 %reg_14)
    call void @putch(i32 32)
    call void @putch(i32 32)
    call void @putint(i32 %reg_15)
    call void @putch(i32 32)
    call void @putch(i32 58)
    call void @putch(i32 32)
    call void @putint(i32 %reg_18)
    call void @putch(i32 10)
    ret void
}

define dso_local i32 @main() {
reg_0:
    call void @putch(i32 50)
    call void @putch(i32 50)
    call void @putch(i32 51)
    call void @putch(i32 55)
    call void @putch(i32 49)
    call void @putch(i32 50)
    call void @putch(i32 57)
    call void @putch(i32 56)
    call void @putch(i32 10)
    %reg_1 = alloca i32
    %reg_2 = call i32 @getint()
    store i32 %reg_2, i32* %reg_1
    %reg_3 = alloca i32
    %reg_4 = call i32 @getint()
    store i32 %reg_4, i32* %reg_3
    %reg_5 = alloca i32
    %reg_6 = call i32 @getint()
    store i32 %reg_6, i32* %reg_5
    call void @cal_fibonacci()
    %reg_7 = load i32, i32* %reg_1
    %reg_8 = icmp sgt i32 %reg_7, 14
    br i1 %reg_8, label %reg_9, label %reg_10

reg_9:
    br label %reg_20

reg_10:
    %reg_11 = load i32, i32* %reg_3
    %reg_12 = icmp sgt i32 %reg_11, 14
    br i1 %reg_12, label %reg_9, label %reg_13

reg_13:
    %reg_14 = load i32, i32* %reg_5
    %reg_15 = icmp sgt i32 %reg_14, 14
    br i1 %reg_15, label %reg_9, label %reg_16

reg_16:
    %reg_17 = load i32, i32* %reg_1
    %reg_18 = load i32, i32* %reg_3
    %reg_19 = load i32, i32* %reg_5
    call void @print_fibonacci_n(i32 %reg_17, i32 %reg_18, i32 %reg_19)
    br label %reg_20

reg_20:
    %reg_21 = alloca i32
    store i32 2147483647, i32* %reg_21
    %reg_22 = alloca i32
    %reg_23 = getelementptr [11 x i32], [11 x i32]* @ZERO_TO_TEN, i32 0, i32 10
    %reg_24 = load i32, i32* %reg_23
    store i32 %reg_24, i32* %reg_22
    %reg_25 = alloca i32
    store i32 1, i32* %reg_25
    br label %reg_26

reg_26:
    %reg_27 = load i32, i32* %reg_25
    %reg_28 = icmp slt i32 %reg_27, 2
    br i1 %reg_28, label %reg_29, label %reg_31

reg_29:
    %reg_32 = load i32, i32* %reg_25
    call void @putint(i32 %reg_32)
    call void @putch(i32 10)
    br label %reg_30

reg_30:
    %reg_33 = load i32, i32* %reg_25
    %reg_34 = add i32 %reg_33, 1
    store i32 %reg_34, i32* %reg_25
    br label %reg_26

reg_31:
    store i32 2, i32* %reg_25
    br label %reg_35

reg_35:
    %reg_38 = load i32, i32* %reg_25
    %reg_39 = icmp eq i32 %reg_38, 5
    br i1 %reg_39, label %reg_40, label %reg_41

reg_36:
    %reg_54 = load i32, i32* %reg_25
    %reg_55 = add i32 %reg_54, 1
    store i32 %reg_55, i32* %reg_25
    br label %reg_35

reg_37:
    store i32 2, i32* %reg_25
    br label %reg_56

reg_40:
    br label %reg_37

reg_41:
    %reg_42 = load i32, i32* %reg_25
    %reg_43 = icmp sle i32 %reg_42, 6
    br i1 %reg_43, label %reg_40, label %reg_44

reg_44:
    %reg_45 = load i32, i32* %reg_25
    %reg_46 = icmp sge i32 %reg_45, 90
    br i1 %reg_46, label %reg_40, label %reg_47

reg_47:
    %reg_48 = load i32, i32* %reg_25
    %reg_49 = icmp eq i32 %reg_48, 100
    br i1 %reg_49, label %reg_40, label %reg_50

reg_50:
    %reg_51 = load i32, i32* %reg_25
    %reg_52 = icmp ne i32 %reg_51, 80
    br i1 %reg_52, label %reg_40, label %reg_53

reg_53:
    br label %reg_36

reg_56:
    %reg_57 = load i32, i32* %reg_25
    %reg_58 = icmp sle i32 %reg_57, 5
    br i1 %reg_58, label %reg_59, label %reg_60

reg_59:
    %reg_61 = load i32, i32* %reg_25
    %reg_62 = icmp ne i32 %reg_61, 90
    br i1 %reg_62, label %reg_63, label %reg_64

reg_60:
    store i32 100, i32* %reg_25
    br label %reg_65

reg_63:
    br label %reg_60

reg_64:
    br label %reg_56

reg_65:
    %reg_68 = load i32, i32* %reg_25
    %reg_69 = icmp sgt i32 %reg_68, 10
    br i1 %reg_69, label %reg_70, label %reg_71

reg_66:
    %reg_72 = load i32, i32* %reg_25
    %reg_73 = add i32 %reg_72, 1
    store i32 %reg_73, i32* %reg_25
    br label %reg_65

reg_67:
    br label %reg_74

reg_70:
    br label %reg_67

reg_71:
    br label %reg_66

reg_74:
    %reg_75 = load i32, i32* %reg_25
    %reg_76 = icmp sgt i32 %reg_75, 50
    br i1 %reg_76, label %reg_77, label %reg_78

reg_77:
    %reg_79 = load i32, i32* %reg_25
    %reg_80 = icmp sgt i32 %reg_79, 80
    br i1 %reg_80, label %reg_81, label %reg_85

reg_78:
    store i32 100, i32* %reg_25
    br label %reg_90

reg_81:
    %reg_82 = load i32, i32* %reg_25
    %reg_83 = icmp slt i32 %reg_82, 120
    br i1 %reg_83, label %reg_84, label %reg_85

reg_84:
    br label %reg_78

reg_85:
    %reg_86 = load i32, i32* %reg_25
    %reg_87 = icmp eq i32 %reg_86, 100
    br i1 %reg_87, label %reg_84, label %reg_88

reg_88:
    br label %reg_74

reg_89:
    br label %reg_74

reg_90:
    %reg_92 = load i32, i32* %reg_25
    %reg_93 = icmp eq i32 %reg_92, 100
    br i1 %reg_93, label %reg_94, label %reg_95

reg_91:
    br label %reg_97

reg_94:
    br label %reg_91

reg_95:
    br label %reg_90

reg_96:
    br label %reg_90

reg_97:
    %reg_99 = icmp ne i32 1, 0
    br i1 %reg_99, label %reg_100, label %reg_101

reg_98:
    %reg_102 = alloca i8
    %reg_103 = call i32 @getchar()
    %reg_104 = trunc i32 %reg_103 to i8
    store i8 %reg_104, i8* %reg_102
    call void @putch(i32 97)
    call void @putch(i32 10)
    call void @putch(i32 97)
    call void @putch(i32 10)
    call void @putch(i32 97)
    call void @putch(i32 10)
    call void @putch(i32 97)
    call void @putch(i32 10)
    call void @putch(i32 97)
    call void @putch(i32 10)
    call void @putch(i32 97)
    call void @putch(i32 10)
    call void @putch(i32 97)
    call void @putch(i32 10)
    ret i32 0

reg_100:
    br label %reg_98

reg_101:
    br label %reg_97
}

